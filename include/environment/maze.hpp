/*
 *  Copyright 2019 Maxine Michalski <maxine@furfind.net>
 *
 *  This file is part of Alex.
 *
 *  Alex is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Alex is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Alex.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <cstdlib>
#include <ctime>
#include <algorithm>

#include "environment.hpp"

#ifndef MAZE_H
#define iMAZE_H

/** @class Maze
 *
 * @brief Environment for the mazes based games.
 *
 * Mazes are generated by the randomized depth-first search algorithm and will
 * have a reward placed inside of them randomly.
 * 
 * The goal is to find the power cell in a minimal amount of steps.
 *
 * Rules:
 * - legal actions are up, right, down, left
 * - actions, that would cause the player to move into a wall are illegal
 * - the player starts with 300 energy
 * - a player can have a maximum of 1,000 energy
 * - each step takes 1 energy
 * - each second passed costs 1 energy
 * - if 0 energy is reached, the game is over
 * - if the power cell is reached
 *   - 100 reward are provided
 *   - 300 energy are added (until max cap is reached)
 *   - power drain is increased by 1, every 15 seconds
 *
 * @author Maxine Michalski
 */
class Maze : public Environment {
	public:
		/** @brief initializer method
		 *
		 * This method setups the environment. Where the chosen algorithm is
		 * used to create a maze and reward placements are done later.
		 *
		 * @param int w - Width of maze
		 * @param int h - Height of maze
		 * @param char method - Algorithm to create maze
		 *
		 * @notice Supported maze generation algorithms are
		 * - randomized depth-first search ('d')
		 */
		Maze(int w, int h, char method);
		/** @see Environment::reset() */
		unsigned short reset(bool with_reward);
		/** @see Environment::act() */
		unsigned short act(unsigned char action);
		/** @see Environment::valid_actions() */
		unsigned char valid_actions();
	private:
		/** @brief Randomized depth-first search algorithm */
		void depth_first(int x, int y);
		/** @brief Randomized Kruskal's algorithm */
		void kruskal();
		/** @brief Randomized Prim's algorithm */
		void prim();
};

#endif // MAZE_H
